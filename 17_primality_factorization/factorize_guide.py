from math import gcd
from random import randrange

# Attempts to find a non-trivial factor of n using Pollard's Rho algorithm.
# It's a probabilistic method â€” fast and practical for large semi-primes (like in RSA).
#
# Idea: Use Floyd's cycle-finding (tortoise & hare) to detect repetition in
# a sequence generated by a function f(x), and hope that the cycle reveals
# a GCD > 1 with n, i.e., a non-trivial factor.
def find_factor(n):
    f = lambda x: (x**2 + 1) % n  # Polynomial function mod n
    a = randrange(n)              # Random starting point

    tortoise = hare = a           # Initialize both pointers

    while True:
        tortoise = f(tortoise)        # Move tortoise by 1 step
        hare = f(f(hare))             # Move hare by 2 steps (like in cycle detection)

        # Check if we've found a non-trivial factor via GCD
        if (g := gcd(tortoise - hare, n)) > 1:
            return g                  # Found a factor!